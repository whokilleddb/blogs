<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on bl0g</title>
    <link>https://whokilleddb.github.io/blogs/posts/</link>
    <description>bl0g (Posts)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Jul 2022 21:01:25 +0530</lastBuildDate>
    
    <atom:link href="https://whokilleddb.github.io/blogs/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DLink DIR 819 LFI And DoS</title>
      <link>https://whokilleddb.github.io/blogs/posts/dlink_dir-819_lfi_and_dos/</link>
      <pubDate>Sun, 31 Jul 2022 21:01:25 +0530</pubDate>
      
      <guid>https://whokilleddb.github.io/blogs/posts/dlink_dir-819_lfi_and_dos/</guid>
      <description>&lt;h1 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;D-Link is one of the leading brands when it comes to manufacturing consumer routers. There&amp;rsquo;s a fair chance that you have a D-Link router back at home. The &lt;a href=&#34;https://www.dlink.com/en/products/dir-819-wireless-ac750-dual-band-router&#34;&gt;D-Link DIR 819&lt;/a&gt; model is a very popular router.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.dlink.com/-/media/global-product-images/consumer/home-networking/routers/dir-819/product-preview/dir-819-front.png?h=820&amp;amp;la=en&amp;amp;w=1000&amp;amp;hash=1905DBB36FD741BB592DAC13D76DB393&#34; alt=&#34;D-Link DIR 819&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this blog post, I explain how I found a Local-File-Inclusion 0day and escalated it to achieve a Denial-of-Service attack. Though the blog is written with respect to the &lt;em&gt;DIR-819&lt;/em&gt; model, it should be reproduceable on any router running the same firmware.&lt;/p&gt;
&lt;h1 id=&#34;description&#34; &gt;Description
&lt;span&gt;
    &lt;a href=&#34;#description&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;The vulnerability, at its core, is a Local File Inclusion vulnerability which exploits the &lt;code&gt;webproc&lt;/code&gt; binary. The same vulnerability can then be leveraged to execute a Denial-of-Service attack against the web services.&lt;/p&gt;
&lt;p&gt;The vulnerability was tested against the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Decription&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Model Name&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D-Link DIR 819&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Firmware Version&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;V1.06&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Hardware Version&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;analysis&#34; &gt;Analysis
&lt;span&gt;
    &lt;a href=&#34;#analysis&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;Upon login, the system uses &lt;code&gt;webproc&lt;/code&gt; to fetch the page to be presented on signup. By default this value is set to &lt;code&gt;html/index.html&lt;/code&gt; which gives us the following page:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://whokilleddb.github.io/blogs/blogs/images/dlink_vulnerability/getpage.png&#34; alt=&#34;GET paramater: getpage&#34;&gt;&lt;/p&gt;
&lt;p&gt;Upon tampering with the &lt;code&gt;getpage&lt;/code&gt; parameter, we can find that the directory from where the page is being served is &lt;code&gt;/usr/www&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://whokilleddb.github.io/blogs/blogs/images/dlink_vulnerability/getpwd.png&#34; alt=&#34;Leaking Server home directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;However, at this point, trying to read server files with the Path Traversal payloads returns a &lt;strong&gt;400 Bad Request&lt;/strong&gt; error page:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://whokilleddb.github.io/blogs/blogs/images/dlink_vulnerability/error.png&#34; alt=&#34;400 Bad Request Error Page&#34;&gt;&lt;/p&gt;
&lt;p&gt;â€‹At this point, I decompile extract the firmware with &lt;code&gt;binwalk&lt;/code&gt; and examine the &lt;code&gt;webproc&lt;/code&gt; binary by decompiling it with &lt;strong&gt;Ghidra&lt;/strong&gt;. Looking at the &lt;code&gt;main&lt;/code&gt; function, at a first glance, I find the following interesting snippet:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://whokilleddb.github.io/blogs/blogs/images/dlink_vulnerability/main_page_display.png&#34; alt=&#34;WEB_DisplayPage in main&#34;&gt;&lt;/p&gt;
&lt;p&gt;Clearly, the &lt;code&gt;WEB_DisplayPage&lt;/code&gt; function is responsible for outputting the contents of a page. Examining the function, we see the source of the previously reflected error message:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://whokilleddb.github.io/blogs/blogs/images/dlink_vulnerability/web_displaypage.png&#34; alt=&#34;Error Source&#34;&gt;&lt;/p&gt;
&lt;p&gt;So, the program checks if the file exists, and if it does, get a handle to the file with &lt;code&gt;open()&lt;/code&gt; and parses the contents as a string, else returns the Error page by calling &lt;code&gt;WEB_DisplayErr&lt;/code&gt;. However, as the &lt;code&gt;WEB_DisplayErr&lt;/code&gt; function states, we can only access pages inside the &lt;code&gt;html&lt;/code&gt; directory tree(as referenced by the following code):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://whokilleddb.github.io/blogs/blogs/images/dlink_vulnerability/html_tree_err.png&#34; alt=&#34;HTML Tree Error&#34;&gt;&lt;/p&gt;
&lt;p&gt;Thus, with all this information in hand, we can go ahead and craft a request to exploit the vulnerability.&lt;/p&gt;
&lt;h1 id=&#34;steps-to-reproduce&#34; &gt;Steps To Reproduce
&lt;span&gt;
    &lt;a href=&#34;#steps-to-reproduce&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Login normally using your credentials&lt;/li&gt;
&lt;li&gt;You should be presented with a similar URL on login:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://192.168.0.1/cgi-bin/webproc?getpage=html/index.html&amp;amp;errorpage=html/main.html&amp;amp;var:language=en_us&amp;amp;var:menu=basic&amp;amp;var:page=Bas_wansum&amp;amp;var:sys_Token=1264095060
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Replace the &lt;code&gt;getpage&lt;/code&gt; parameter to:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;html/%2e%2e/%2e%2e/%2e%2e/etc/shadow
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;The resulting URL would be similar to:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://192.168.0.1/cgi-bin/webproc?getpage=html/%2e%2e/%2e%2e/%2e%2e/etc/shadow&amp;amp;errorpage=html/main.html&amp;amp;var:language=en_us&amp;amp;var:menu=basic&amp;amp;var:page=Bas_wansum&amp;amp;var:sys_Token=1264095060
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Now, upon hitting enter and making the request, the contents of &lt;code&gt;/etc/shadow&lt;/code&gt; (or whatever file you requested, will be fetched)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://whokilleddb.github.io/blogs/blogs/images/dlink_vulnerability/etc_shadow.png&#34; alt=&#34;/etc/shadow&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;escalating-to-denial-of-service&#34; &gt;Escalating to Denial of Service
&lt;span&gt;
    &lt;a href=&#34;#escalating-to-denial-of-service&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;It is possible to launch a Denial of Service attack using the above method. To do this, simply replace the file to read woth &lt;code&gt;/dev/random&lt;/code&gt; and this shall send the server into a bottomless read operation, effectively causing a Denial of Service attack.&lt;/p&gt;
&lt;h1 id=&#34;impact&#34; &gt;Impact
&lt;span&gt;
    &lt;a href=&#34;#impact&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;This vulnerability can allow an attacker to read files on the server, steal credentials and reveal sensitive server side information like log files and such. Also, if an attacker is able to hijack an user session, they can read passwords, credentials etc and can lead to several attacks&lt;/p&gt;
&lt;h1 id=&#34;references&#34; &gt;References
&lt;span&gt;
    &lt;a href=&#34;#references&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CVE&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CVE-2006-5536&lt;/td&gt;
&lt;td&gt;Directory traversal vulnerability in cgi-bin/webcm in D-Link DSL-G624T firmware 3.00B01T01.YA-C.20060616 allows remote attackers to read arbitrary files via a &lt;code&gt;..&lt;/code&gt; (dot dot) in the getpage parameter.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CVE-2006-2337&lt;/td&gt;
&lt;td&gt;Directory traversal vulnerability in webcm in the D-Link DSL-G604T Wireless ADSL Router Modem allows remote attackers to read arbitrary files via an absolute path in the getpage parameter&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;disclaimer&#34; &gt;Disclaimer
&lt;span&gt;
    &lt;a href=&#34;#disclaimer&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;The original advisory was sent to &lt;code&gt;security@dlink.com&lt;/code&gt; but could not elicit a response. Hence, this article&amp;rsquo;s role is to spread out the word about the vulnerability.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
