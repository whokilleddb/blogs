<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bl0g</title>
    <link>https://whokilleddb.github.io/blogs/</link>
    <description>bl0g</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Jul 2022 21:01:25 +0530</lastBuildDate>
    
    <atom:link href="https://whokilleddb.github.io/blogs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DLink DIR 819 LFI And DoS</title>
      <link>https://whokilleddb.github.io/blogs/posts/dlink_dir-819_lfi_and_dos/</link>
      <pubDate>Sun, 31 Jul 2022 21:01:25 +0530</pubDate>
      
      <guid>https://whokilleddb.github.io/blogs/posts/dlink_dir-819_lfi_and_dos/</guid>
      <description>&lt;h1 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;D-Link is one of the leading brands when it comes to manufacturing consumer routers. There&amp;rsquo;s a fair chance that you have a D-Link router back at home. The &lt;a href=&#34;https://www.dlink.com/en/products/dir-819-wireless-ac750-dual-band-router&#34;&gt;D-Link DIR 819&lt;/a&gt; model is a very popular router.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.dlink.com/-/media/global-product-images/consumer/home-networking/routers/dir-819/product-preview/dir-819-front.png?h=820&amp;amp;la=en&amp;amp;w=1000&amp;amp;hash=1905DBB36FD741BB592DAC13D76DB393&#34; alt=&#34;D-Link DIR 819&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this blog post, I explain how I found a Local-File-Inclusion 0day and escalated it to achieve a Denial-of-Service attack. Though the blog is written with respect to the &lt;em&gt;DIR-819&lt;/em&gt; model, it should be reproduceable on any router running the same firmware.&lt;/p&gt;
&lt;h1 id=&#34;description&#34; &gt;Description
&lt;span&gt;
    &lt;a href=&#34;#description&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;The vulnerability, at its core, is a Local File Inclusion vulnerability which exploits the &lt;code&gt;webproc&lt;/code&gt; binary. The same vulnerability can then be leveraged to execute a Denial-of-Service attack against the web services.&lt;/p&gt;
&lt;p&gt;The vulnerability was tested against the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Decription&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Model Name&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D-Link DIR 819&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Firmware Version&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;V1.06&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Hardware Version&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;analysis&#34; &gt;Analysis
&lt;span&gt;
    &lt;a href=&#34;#analysis&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;Upon login, the system uses &lt;code&gt;webproc&lt;/code&gt; to fetch the page to be presented on signup. By default this value is set to &lt;code&gt;html/index.html&lt;/code&gt; which gives us the following page:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://whokilleddb.github.io/blogs/blogs/images/dlink_vulnerability/getpage.png&#34; alt=&#34;GET paramater: getpage&#34;&gt;&lt;/p&gt;
&lt;p&gt;Upon tampering with the &lt;code&gt;getpage&lt;/code&gt; parameter, we can find that the directory from where the page is being served is &lt;code&gt;/usr/www&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://whokilleddb.github.io/blogs/blogs/images/dlink_vulnerability/getpwd.png&#34; alt=&#34;Leaking Server home directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;However, at this point, trying to read server files with the Path Traversal payloads returns a &lt;strong&gt;400 Bad Request&lt;/strong&gt; error page:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://whokilleddb.github.io/blogs/blogs/images/dlink_vulnerability/error.png&#34; alt=&#34;400 Bad Request Error Page&#34;&gt;&lt;/p&gt;
&lt;p&gt;â€‹At this point, I decompile extract the firmware with &lt;code&gt;binwalk&lt;/code&gt; and examine the &lt;code&gt;webproc&lt;/code&gt; binary by decompiling it with &lt;strong&gt;Ghidra&lt;/strong&gt;. Looking at the &lt;code&gt;main&lt;/code&gt; function, at a first glance, I find the following interesting snippet:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://whokilleddb.github.io/blogs/blogs/images/dlink_vulnerability/main_page_display.png&#34; alt=&#34;WEB_DisplayPage in main&#34;&gt;&lt;/p&gt;
&lt;p&gt;Clearly, the &lt;code&gt;WEB_DisplayPage&lt;/code&gt; function is responsible for outputting the contents of a page. Examining the function, we see the source of the previously reflected error message:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://whokilleddb.github.io/blogs/blogs/images/dlink_vulnerability/web_displaypage.png&#34; alt=&#34;Error Source&#34;&gt;&lt;/p&gt;
&lt;p&gt;So, the program checks if the file exists, and if it does, get a handle to the file with &lt;code&gt;open()&lt;/code&gt; and parses the contents as a string, else returns the Error page by calling &lt;code&gt;WEB_DisplayErr&lt;/code&gt;. However, as the &lt;code&gt;WEB_DisplayErr&lt;/code&gt; function states, we can only access pages inside the &lt;code&gt;html&lt;/code&gt; directory tree(as referenced by the following code):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://whokilleddb.github.io/blogs/blogs/images/dlink_vulnerability/html_tree_err.png&#34; alt=&#34;HTML Tree Error&#34;&gt;&lt;/p&gt;
&lt;p&gt;Thus, with all this information in hand, we can go ahead and craft a request to exploit the vulnerability.&lt;/p&gt;
&lt;h1 id=&#34;steps-to-reproduce&#34; &gt;Steps To Reproduce
&lt;span&gt;
    &lt;a href=&#34;#steps-to-reproduce&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Login normally using your credentials&lt;/li&gt;
&lt;li&gt;You should be presented with a similar URL on login:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://192.168.0.1/cgi-bin/webproc?getpage=html/index.html&amp;amp;errorpage=html/main.html&amp;amp;var:language=en_us&amp;amp;var:menu=basic&amp;amp;var:page=Bas_wansum&amp;amp;var:sys_Token=1264095060
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Replace the &lt;code&gt;getpage&lt;/code&gt; parameter to:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;html/%2e%2e/%2e%2e/%2e%2e/etc/shadow
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;The resulting URL would be similar to:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://192.168.0.1/cgi-bin/webproc?getpage=html/%2e%2e/%2e%2e/%2e%2e/etc/shadow&amp;amp;errorpage=html/main.html&amp;amp;var:language=en_us&amp;amp;var:menu=basic&amp;amp;var:page=Bas_wansum&amp;amp;var:sys_Token=1264095060
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Now, upon hitting enter and making the request, the contents of &lt;code&gt;/etc/shadow&lt;/code&gt; (or whatever file you requested, will be fetched)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://whokilleddb.github.io/blogs/blogs/images/dlink_vulnerability/etc_shadow.png&#34; alt=&#34;/etc/shadow&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;escalating-to-denial-of-service&#34; &gt;Escalating to Denial of Service
&lt;span&gt;
    &lt;a href=&#34;#escalating-to-denial-of-service&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;It is possible to launch a Denial of Service attack using the above method. To do this, simply replace the file to read woth &lt;code&gt;/dev/random&lt;/code&gt; and this shall send the server into a bottomless read operation, effectively causing a Denial of Service attack.&lt;/p&gt;
&lt;h1 id=&#34;impact&#34; &gt;Impact
&lt;span&gt;
    &lt;a href=&#34;#impact&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;This vulnerability can allow an attacker to read files on the server, steal credentials and reveal sensitive server side information like log files and such. Also, if an attacker is able to hijack an user session, they can read passwords, credentials etc and can lead to several attacks&lt;/p&gt;
&lt;h1 id=&#34;references&#34; &gt;References
&lt;span&gt;
    &lt;a href=&#34;#references&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CVE&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CVE-2006-5536&lt;/td&gt;
&lt;td&gt;Directory traversal vulnerability in cgi-bin/webcm in D-Link DSL-G624T firmware 3.00B01T01.YA-C.20060616 allows remote attackers to read arbitrary files via a &lt;code&gt;..&lt;/code&gt; (dot dot) in the getpage parameter.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CVE-2006-2337&lt;/td&gt;
&lt;td&gt;Directory traversal vulnerability in webcm in the D-Link DSL-G604T Wireless ADSL Router Modem allows remote attackers to read arbitrary files via an absolute path in the getpage parameter&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;disclaimer&#34; &gt;Disclaimer
&lt;span&gt;
    &lt;a href=&#34;#disclaimer&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;The original advisory was sent to &lt;code&gt;security@dlink.com&lt;/code&gt; but could not elicit a response. Hence, this article&amp;rsquo;s role is to spread out the word about thw vulnerability.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What the Duck is Cell in Rust?</title>
      <link>https://whokilleddb.github.io/blogs/posts/what_the_duck_is_cell/</link>
      <pubDate>Sun, 19 Jun 2022 19:14:38 +0530</pubDate>
      
      <guid>https://whokilleddb.github.io/blogs/posts/what_the_duck_is_cell/</guid>
      <description>&lt;p&gt;&lt;em&gt;A guide for dummies by a dummy&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;a-rant-as-an-introduction&#34; &gt;A Rant as an Introduction
&lt;span&gt;
    &lt;a href=&#34;#a-rant-as-an-introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;While reading through &lt;a href=&#34;https://kerkour.com/black-hat-rust&#34;&gt;Black Hat Rust by Sylvain Kerkour&lt;/a&gt;, I fell into a Rabbit Hole and came across &lt;code&gt;Shareable mutable containers&lt;/code&gt;, which seemed very, very strange to someone who has read just the first two chapters of the &lt;a href=&#34;https://doc.rust-lang.org/&#34;&gt;Rust Lang Book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Therefore, being the eccentric that I am, I decided that the best way to do this is to implement some of the code myself. A &lt;strong&gt;BIG BIG&lt;/strong&gt; part of this post comes from &lt;a href=&#34;https://www.youtube.com/watch?v=8O0Nt9qY_vo&#34;&gt;Jon Gjengset&amp;rsquo;s Streams&lt;/a&gt;, so do check him out!&lt;/p&gt;
&lt;p&gt;With that said, let&amp;rsquo;s just understand what the duck is this &lt;code&gt;Cell&lt;/code&gt; thingy.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PS: Hi, this is me from the future. Those of you wanting to know about &lt;code&gt;RefCell&lt;/code&gt;, I was thinking of doing a blog post on it later. This post, strictly, talks only about &lt;code&gt;Cell&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;let-mut-light&#34; &gt;let mut light;
&lt;span&gt;
    &lt;a href=&#34;#let-mut-light&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;For those of you who have a goldfish memory like me, here&amp;rsquo;s a quick recap on mutability:&lt;/p&gt;
&lt;p&gt;Simply put, &lt;em&gt;mutability&lt;/em&gt; is the property which allows us to specify if we can change the value contained in a variable. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; 		&lt;span style=&#34;color:#75715e&#34;&gt;// We can change this value later
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;				&lt;span style=&#34;color:#75715e&#34;&gt;// We cannot change this value later
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1: {} v2: {}&amp;#34;&lt;/span&gt;, v1, v2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;				&lt;span style=&#34;color:#75715e&#34;&gt;// This is OKAY
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;				&lt;span style=&#34;color:#75715e&#34;&gt;// The compiler throws some nasty errors here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1: {} v2: {}&amp;#34;&lt;/span&gt;, v1, v2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we try to run the above program with &lt;code&gt;cargo run&lt;/code&gt;, we get the following error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;error&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;E0384&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: cannot assign twice to immutable variable &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;v2&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; --&amp;gt; src/main.rs:7:5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; |     let v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 6;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  |         --
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  |         |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  |         first assignment to &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;v2&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  |         help: consider making this binding mutable: &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;mut v2&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; |     v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; -6;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  |     ^^^^^^^ cannot assign twice to immutable variable
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now comes the tricky part: &lt;code&gt;references&lt;/code&gt;. Following the definition from the &lt;a href=&#34;https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html&#34;&gt;Rust Lang Book&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;A reference is like a pointer in that itâ€™s an address we can follow to access data stored at that address that is owned by some other variable.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The book also goes forth and states that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Unlike a pointer, a reference is guaranteed to point to a valid value of a particular type.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While trying to better understand the difference between &lt;code&gt;references&lt;/code&gt; and &lt;code&gt;pointers&lt;/code&gt;, I can across &lt;a href=&#34;https://stackoverflow.com/a/62234967&#34;&gt;this StackOverflow answer&lt;/a&gt;. For now, suffice to say that &lt;code&gt;references&lt;/code&gt; are just cool-er pointer which have some extra semantics.&lt;/p&gt;
&lt;p&gt;Now, coming back to our original topic, Mutability. What do references have to do with Mutability anyway? Recall back to the &lt;a href=&#34;https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html&#34;&gt;Chapter 4 of the Rust Lang book&lt;/a&gt; where we learned that references can be mutable as well. At the veryyyyy end of the page, under &lt;a href=&#34;https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html#the-rules-of-references&#34;&gt;The Rules of References&lt;/a&gt; we have the following two points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At any given time, you can haveÂ &lt;em&gt;either&lt;/em&gt;Â one mutable referenceÂ &lt;em&gt;or&lt;/em&gt;Â any number of immutable references.&lt;/li&gt;
&lt;li&gt;References must always be valid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Long story short, we cannot have two mutable references to the same data. If this part is confusing, go take a break, make some coffee and:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read about &lt;a href=&#34;https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html#mutable-references&#34;&gt;Mutable References from the Rust Lang Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Watch &lt;a href=&#34;https://www.youtube.com/watch?v=VFIOSWy93H0&#34;&gt;Let&amp;rsquo;s Get Rusty&amp;rsquo;s video on Ownership&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have a working knowledge of the thing, we can move ahead.&lt;/p&gt;
&lt;h2 id=&#34;looking-inside-cell-shareable-mutable-what&#34; &gt;Looking Inside &lt;code&gt;Cell&lt;/code&gt;: shareable-mutable-what?
&lt;span&gt;
    &lt;a href=&#34;#looking-inside-cell-shareable-mutable-what&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://whokilleddb.github.io/blogs/blogs/images/what_the_duck_is_Cell/cell_dbz.jpeg&#34; alt=&#34;&#34;&gt;
Reading through &lt;a href=&#34;https://doc.rust-lang.org/std/cell/&#34;&gt;the documentation for the cell module&lt;/a&gt;, we come across the following statement:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Values of theÂ &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt;Â andÂ &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;Â types may be mutated through shared references (i.e. the commonÂ &lt;code&gt;&amp;amp;T&lt;/code&gt;Â type), whereas most Rust types can only be mutated through unique (&lt;code&gt;&amp;amp;mut T&lt;/code&gt;) references. We say thatÂ &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt;Â andÂ &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;Â provide â€˜interior mutabilityâ€™, in contrast with typical Rust types that exhibit â€˜inherited mutabilityâ€™.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But if we remember carefully, the first rule of Mutability was that we can either have &lt;em&gt;one mutable&lt;/em&gt; reference or &lt;em&gt;multiple immutable&lt;/em&gt; references. Therefore, the idea of having &lt;em&gt;shareable mutable references&lt;/em&gt; seems conflicting.&lt;/p&gt;
&lt;p&gt;Well, this is where &lt;code&gt;Cell&lt;/code&gt; kicks in. It enables mutation inside an immutable struct, hence the name &lt;em&gt;&amp;lsquo;Interior Mutability&amp;rsquo;&lt;/em&gt;, If you look closely enough, you will notice that none of the associated implementations actually return a reference to the internal value. Hence, if no one has a pointer to the internal value contained in a &lt;code&gt;Cell&lt;/code&gt;, then no one can update it, right? We will see more of this when we implement some code ourselves.  For our demonstration, we will be focusing on three implementations in general: &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another question which arises when talking about all this mutability and referencing is the question of Threads, what if shareable references lead to Race conditions? The answer can be found in the &lt;a href=&#34;https://doc.rust-lang.org/std/cell/&#34;&gt;cell module documentation&lt;/a&gt;, in the following lines:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Shareable mutable containers exist to permit mutability in a controlled manner, even in the presence of aliasing. BothÂ &lt;a href=&#34;https://doc.rust-lang.org/std/cell/struct.Cell.html&#34; title=&#34;Cell&amp;lt;T&amp;gt;&#34;&gt;&lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;Â andÂ &lt;a href=&#34;https://doc.rust-lang.org/std/cell/struct.RefCell.html&#34; title=&#34;RefCell&amp;lt;T&amp;gt;&#34;&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;Â allow doing this in a single-threaded way. However, neitherÂ &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt;Â norÂ &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;Â are thread safe (they do not implementÂ &lt;a href=&#34;https://doc.rust-lang.org/std/marker/trait.Sync.html&#34; title=&#34;Sync&#34;&gt;&lt;code&gt;Sync&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus, to make things simple, Rust doesn&amp;rsquo;t allow you to share references across threads. Rust achieves this by &lt;a href=&#34;https://doc.rust-lang.org/std/cell/struct.Cell.html#impl-Sync&#34;&gt;&lt;strong&gt;NOT&lt;/strong&gt; implementing &lt;code&gt;Sync&lt;/code&gt; on &lt;code&gt;Cell&lt;/code&gt;&lt;/a&gt;. Hence, if only one thread has a reference to the value, then it eliminates the possibility of any race conditions.&lt;/p&gt;
&lt;p&gt;Now the question is, what exactly does &lt;code&gt;Cell&lt;/code&gt; look like under the hood? Looking at the source code, we find the following definition of the &lt;code&gt;Cell&lt;/code&gt; struct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cell&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T: &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;Sized&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    value: &lt;span style=&#34;color:#a6e22e&#34;&gt;UnsafeCell&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wait a sec, what-the-duck is &lt;code&gt;UnsafeCell&lt;/code&gt; now? Well, it is technically what makes the whole Interior Mutability thing possible. Looking at the &lt;a href=&#34;https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html&#34;&gt;documentation for UnsafeCell&lt;/a&gt;, it states that it is the &lt;em&gt;&amp;ldquo;The core primitive for interior mutability in Rust.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
